#!/bin/sh

### uncomment below to assist debugging ###
#export PS4='[$LINENO] '
#set -x
### ----------------------------------- ###

### show a categorized list of available aliases/functions
function showaliases() {
	echo ""
	echo "Available aliases:"
	echo "  showaliases  » show this list"
	echo "Java config:"
	echo "  ipv4         » allow only v4 addresses"
	echo "  ipv6         » allow v6 addresses also"
	echo "Git & Git Hub:"
	echo "  gitpull      » do a merge-safe pull"
	echo "Maven operations:"
	echo "  m2govcloud   » switch maven nexus to gov.cloud configuration"
	echo "  m2evss       » switch maven nexus to EVSS configuration"
	echo "  m2clean      » delete nexus-provided artifacts from ~/.m2/repository"
	echo "                 except for: com/hpe**"
	echo "  rmtarget     » remove all '**/target/' dirs under current dir"
	echo "  versions     » run the Versions developer tool"
	echo "Sonar operations:"
	echo "  sonarstart   » start the sonar server"
	echo "  sonarstop    » stop the sonar server"
	echo "  sonarclean   » clean out sonar history"
	echo "Fortify operations:"
	echo "  fortifyclean » clean FPR for current dir for current dir"
	echo "  fortifyscan  » scan the current dir for current dir"
	echo "Docker generic operations:"
	echo "  docrclean    » remove all but sonar images (incl dangling)"
	echo "  docrdelall   » delete all images"
	echo "  docrdeldang  » delete dangling images"
	echo "Ascent helpers"
	echo "  docrbuild    » build the docker image in the current project"
	echo "  docrcup      » run docker-demo for the current project directory"
	echo "  perftest     » run perftest for the current *-perftest project"
	echo "  review       » run maven build, sonar and fortify for current dir"
	echo "  sboot        » run the springboot microservice in current dir"
	echo "  vaultCerts   » get the certs package from vault"
	echo ""
}

############################################################
##### ------------------------------------------------ #####
#####            SET ENVIRONMENT VARIABLES             #####
##### ------------------------------------------------ #####
############################################################


######################################################
## VARIABLES USED FOR DECLARING ENVIRONMENT PATH    ##
######################################################

### java home path on macOS
java8_home_path=$(/usr/libexec/java_home -v 1.8)
#echo "got java8_home_path from libexec: $java8_home_path"

### tomcat
tomcat_path=/Applications/apache-tomcat-7.0.68/bin
#echo "got tomcat_path: $tomcat_path"

### maven
maven_path_339=/Applications/apache-maven-3.3.9/bin
#echo "got maven_path_339: maven_path_339"

### ant
ant_path=/Applications/apache-ant-1.9.6/bin
#echo "got ant_path: $ant_path"

### sonar
sonar_path_55=/Applications/sonarqube-5.5/bin/macosx-universal-64
#echo "got sonar_path_55: $sonar_path_55"
sonar_scanner_path_26=/Applications/sonar-scanner-2.6/bin
#echo "got sonar_scanner_path_26: $sonar_scanner_path_26"

### fortify
fortify_path_17_10=/Applications/HPE_Security/Fortify_SCA_and_Apps_17.10/bin
#echo "got fortify_path_17_10: $fortify_path_17_10"

### docker
docker_compose_path=/usr/local/bin
#echo "got docker_compose_path: $docker_compose_path"

######################################################
## SET THE ENVIRONMENT PATH (values declared above) ##
######################################################

### save the original bash path
if [ "$PATH_ORIGINAL" == "" ]; then
	PATH_ORIGINAL=$(echo "$PATH")
fi
#echo "saved PATH_ORIGINAL to: $PATH_ORiGINAL"

### set the path
export PATH="$fortify_path_17_10:$PATH_ORIGINAL:$java8_home_path:$docker_compose_path:$tomcat_path:$maven_path_339:$ant_path:$sonar_path_55:$sonar_scanner_path_26"
#echo "exported PATH to: $PATH"

######################################################
## SET UP THE JAVA ENVIRONMENT                      ##
######################################################

### make asliases to set the prefered IP stack (v4 or v6) in java
alias ipv4='echo "Preferring IP v4";export JAVA_OPTS="-Djava.net.preferIPv4Stack=true";'
alias ipv6='echo "Preferring IP v6";export JAVA_OPTS="-Djava.net.preferIPv4Stack=false";'
#echo "made IPv aliases"

### by default, prefere IPv4
ipv4

### export java home
export JAVA_HOME=$java8_home_path;
#echo "exported JAVA_HOME to: $java8_home_path"

######################################################
## SET UP THE GIT AND GIT_HUB ENVIRONMENTS          ##
######################################################

### export GIT_ACCESS_TOKEN=MY_GIT_HUB_TOKEN
export GIT_ACCESS_TOKEN=a68f06a11c647ab82398ca4cbd1a1f457aa4bb21
#echo "exported GIT_ACCESS_TOKEN to: $GIT_ACCESS_TOKEN"

# export git home directory
export GIT_HOME=$HOME/git
#echo "exported GIT_HOME to: $GIT_HOME"

######################################################
## SET HOME ENVIRONENTS FOR OTHER TOOLS             ##
######################################################

### export ANT_HOME (ant_path minus the /bin at the end)
export ANT_HOME=${ant_path%/bin}
#echo "exported ANT_HOME to: $ANT_HOME"

### export MAVEN_HOME (maven_path_339 minus the /bin at the end)
export MAVEN_HOME=${maven_path_339%/bin}
#echo "exported ANT_HOME to: $ANT_HOME"

######################################################
## MAKE BASH EXPORTS AVAILABLE TO OTHER APPS        ##
######################################################

### set app environment PATH for eclipse, etc
launchctl setenv PATH $PATH
#echo "launchctl setenv PATH $PATH"

### set app environment JAVA_HOME for eclipse, etc
launchctl setenv JAVA_HOME $java8_home_path
#echo "launchctl setenv JAVA_HOME $java8_home_path"

### set app environment GIT_ACCESS_TOKEN for eclipse, etc
launchctl setenv GIT_ACCESS_TOKEN $GIT_ACCESS_TOKEN
#echo "launchctl setenv GIT_ACCESS_TOKEN $GIT_ACCESS_TOKEN"

### set app environment GIT_HOME for eclipse, etc
launchctl setenv GIT_HOME $GIT_HOME
#echo "launchctl setenv GIT_HOME $GIT_HOME"

### set app environment ANT_HOME for eclipse, etc
launchctl setenv ANT_HOME $ANT_HOME
#echo "launchctl setenv ANT_HOME $ANT_HOME"

### set app environment MAVEN_HOME for eclipse, etc
launchctl setenv MAVEN_HOME $MAVEN_HOME
#echo "launchctl setenv MAVEN_HOME $MAVEN_HOME"


############################################################
##### ------------------------------------------------ #####
#####    SET ALIASES FOR EASY RECALL AND EXECUTION     #####
##### ------------------------------------------------ #####
############################################################

######################################################
## GIT OPERATIONS                                   ##
######################################################

### merge-safe pull
function gitpull() {
	echo "▶︎ git merge HEAD --no-commit"
	git merge HEAD --no-commit
	if [ "$?" -eq "0" ]; then
		echo "▶︎ git pull"
		git pull
	fi
}

######################################################
## MAVEN-SPECIFIC OPERATIONS                        ##
######################################################

### delete target directories in all projects under current directory
function rmtarget() {
	echo "▶︎ rm -rf \$(find . -name \'target\' -type d -maxdepth 4 | sed \'s:\.\/::g\')"
	rm -rf $(find . -name 'target' -type d -maxdepth 4 | sed 's:\.\/::g')
}

### delete all directories except those identified as not coming from nexus
function m2clean() {
	TMP="`pwd`"
	### run the find-and-delete command
	echo "▶︎ cd ~/.m2/repository"
	echo "▶︎ rm -rf \$(find . -d -type d -not -path \"./com\" -not -path \"./com/hpe*\")"
	cd ~/.m2/repository
	rm -rf $(find . -d -type d -not -path "./com" -not -path "./com/hpe*")
	cd "$TMP"
}

### set maven/nexus settings.xml to evss settings
function m2evss() {
	if [ -d "$HOME/.m2/_m2-repo-settings" ]; then
		if [ -f "$HOME/.m2/_m2-repo-settings/evss-settings.xml" ]; then
			cp "$HOME/.m2/_m2-repo-settings/evss-settings.xml" "$HOME/.m2/settings.xml"
			echo "** Remember to start evss vpn!"
		else
			echo "File \"$HOME/.m2/_m2-repo-settings/evss-settings.xml\" does not exist."
		fi
	else
		echo "Directory \"$HOME/.m2/_m2-repo-settings\" does not exist."
	fi
}

### set maven/nexus settings.xml to gov.cloud settings
function m2govcloud() {
	if [ -d "$HOME/.m2/_m2-repo-settings/" ]; then
		if [ -f "$HOME/.m2/_m2-repo-settings/govcloud-settings.xml" ]; then
			cp "$HOME/.m2/_m2-repo-settings/govcloud-settings.xml" "$HOME/.m2/settings.xml"
			echo "** Remember to start govcloud vpn!"
		else
			echo "File \"$HOME/.m2/_m2-repo-settings/govcloud-settings.xml\" does not exist."
		fi
	else
		echo "Directory \"~/.m2/_m2-repo-settings/\" does not exist."
	fi
}

### print a report of versioning issues across all projects
function versions() {
	TMP="`pwd`"
	echo "▶︎ cd $GIT_HOME/ascent-developer"
	echo "▶︎ java -cp target/ascent-developer.jar gov.va.ascent.tools.Versions ."
	cd $GIT_HOME/ascent-developer
	java -cp target/ascent-developer.jar gov.va.ascent.tools.Versions .
	cd "$TMP"
}

######################################################
## SONAR OPERATIONS                                 ##
######################################################

### start sonar docker container
function sonarstart() {
	TMP="`pwd`"
	echo "▶︎ cd ~/git/ascent-platform"
	cd ~/git/ascent-platform
	echo "▶︎ docker-compose -f ascent-platform-docker-build/containers/sonarqube/docker-compose.yml up --build -d"
	docker-compose -f ascent-platform-docker-build/containers/sonarqube/docker-compose.yml up --build -d

	n=0
	printf "▶︎ Waiting for sonar to become available "
	printf "."
	while [[ $n -lt 20 ]]
	do
		curl --head --fail "http://localhost:9000" > /dev/null 2>&1
		curlresp="$?"
		if [ "$curlresp" -ne "0" ]; then
			printf "$curlresp."
			sleep 1 >/dev/null 2>&1
			n=$((n+1))
		else
			printf "$curlresp."
			break
		fi
	done
	echo "."
	echo "▶︎ Running sonar containers:"
	docker ps --filter "name=sonar"
	#docker ps | grep sonar
	echo "▶︎ To run analysis: \$ mvn sonar:sonar"
	cd "$TMP"
}

### stop sonar docker container
function sonarstop() {
	echo "▶︎ docker stop \$(docker ps --filter \"name=sonar\" --format \"⎨⎨.ID⎬⎬\")"
	docker stop $(docker ps --filter "name=sonar" --format "{{.ID}}")
	echo "▶︎ Sonar stopped"
}

### remove all sonar history
function sonarclean() {
	echo "Still figuring this out. This command currently does nothing."
}

######################################################
## FORTIFY OPERATIONS                                 ##
######################################################

### remove fortify history for current project
alias fortifyclean='
echo "▶︎ mvn initialize sca:clean sca:translate";
mvn initialize sca:clean sca:translate;'

### fortify scan for current project
### this is the manual way >> fortifyscan='mvn initialize sca:scan'
alias fortifyscan='
echo "▶︎ mvn antrun:run@fortify-scan -N";
mvn antrun:run@fortify-scan -N;'

# merge generated to main: fprutility -merge -project fortify-audits.fpr -source <prpojectname>/target/fortify/<filename>.fpr> -f foritfy-audits.fpr
# merge main to generated: fprutility -merge -project <prpojectname>/target/fortify/<filename>.fpr> -source fortify-audits.fpr -f <prpojectname>/target/fortify/<filename>.fpr>

#######################################################
## GENERIC DOCKER OPERATIONS (not Ascent operations) ##
#######################################################

### delete dangling / orphaned images
alias docrdeldang='
echo "▶︎ docker rmi \$(docker images -f dangling=true -q)";
docker rmi $(docker images -f dangling=true -q);'

### delete all docker images
function docrdelall() {
	echo "▶︎ docker stop \$(docker ps -q)"
	docker stop $(docker ps -q)
	echo "▶︎ docker rmi \$(docker images -a -q)"
	docker rmi -f $(docker images -a -q);
}

### delete all docker images except sonar and alpine
alias docrclean='
TMP_KEEP="sonarqube|alpine|postgres";
echo "▶︎ docker rmi -f \$(docker images -a --format \"{{.ID}}:\\t{{.Repository}}\" | grep -Eiv \"sonarqube|alpine|postgres\" | cut -f 1 -d \":\")";
docker rmi -f $(docker images -a --format "{{.ID}}:\t{{.Repository}}" | grep -Eiv "sonarqube|alpine|postgres" | cut -f 1 -d ":");
docker rmi -f $(docker images -f dangling=true -q);'



######################################################
## ASCENT local-int HELPERS                         ##
######################################################

### get vault certificates into a p12 file
function vaultCerts() {
	TMP=`pwd`
	if [ -z "~/temp/" ]; then
		echo "▶︎ mkdir ~/temp"
		mkdir ~/temp
	fi
	echo "▶︎ cd ~/git/vetservices-refdata"
	cd ~/git/vetservices-refdata
	echo "▶︎ docker-compose up -d vault"
	docker-compose up -d vault
	printf "▶︎ Let vault start up "
	n=0
	while [[ $n -lt 10 ]]
	do
		printf "."
		sleep 1 >/dev/null 2>&1
		n=$((n+1))
	done
	echo "."
	echo "▶︎ cd ~/temp"
	cd ~/temp
	echo "▶︎ ~/git/ascent-platform/ascent-platform-docker-build/containers/vault/create-cert.sh"
	~/git/ascent-platform/ascent-platform-docker-build/containers/vault/create-cert.sh
	echo "▶︎ pkill \"Keychain Access\""
	pkill "Keychain Access"
	echo "▶︎ ##################################################################"
	echo "▶︎ Import certificate to the \"login\" section, pw=changeit"
	echo "▶︎ Imported certificate name is \"app.internal.vetservices.gov\""
	echo "▶︎ ##################################################################"
	echo "▶︎ open developer.p12"
	open developer.p12
	cd "$TMP"
}

### build the docker image in the current project
function docrbuild() {
	gitpull
	TMPDIR=`echo "$(pwd)"|grep -o '[^/]\+$'`
	if [ ! -f pom.xml ]; then
		read -p "▶︎ Not a maven project. Press [Enter] to continue, [Ctrl+C] to abort. "
	else
		echo "▶︎ mvn clean install -Ddockerfile.skip=true"
		mvn clean install -Ddockerfile.skip=true
	fi
	if [ "$?" -eq "0" ]; then
		echo "▶︎ find . -name \"Dockerfile\" -execdir docker build -t ascent/$TMPDIR . \;"
		find . -name "Dockerfile" -execdir docker build -t ascent/$TMPDIR . \;
		if [ "$?" -ne "0" ]; then
			echo "▶︎ Docker build failed with $?. Docker image not built."
		fi
	else
		echo "▶︎ Maven build failed. Docker image not built."
	fi
}

### in project dir; whatever local docker containers, start them
function docrcup() {
	TMPDIR=`echo "$(pwd)"|grep -o '[^/]\+$'`
	TMPFILE="$TMPDIR.dockercompose.log"
	echo "▶︎ docker-compose up"
	touch "$TMPFILE"
	open -a Sublime\ Text "$TMPFILE"
	echo "▶︎ Docker Compose environment is starting. Press [Ctrl+C] to stop..."
	docker-compose up > "$TMPFILE" 2>&1
	echo " "
	echo "▶︎ Docker Compose environment is shutting down, please wait ..."
	docker-compose down > "$TMPFILE" 2>&1
	read -p "▶︎ Press [Enter] to remove $TMPFILE, or [Ctrl+C] to leave the log file in place."
	echo "rm $TMPFILE"
	rm "$TMPFILE"
}

### run a performance test
function perftest() {
	if [ "`pwd | grep perftest`" == "" ]; then
		echo "Please change to a *-perftest directory"
		exit 1
	else
		echo "▶︎ mvn verify -Pperftest"
		mvn verify -Pperftest
	fi
}

### maven build, sonar scan, fortify scan for current project
function review() {
	gitpull
	if [ "$?" -eq "0" ]; then
		echo "▶︎ mvn clean install"
		mvn clean install
		if [ "$?" -eq "0" ]; then
			echo "▶︎ sonarstart"
			sonarstart
			echo "▶︎ mvn sonar:sonar"
			mvn sonar:sonar
			if [ "$?" -eq "0" ]; then
				fortifyscan
				if [ "$?" -eq "0" ]; then
					echo -e "\n☠️💀☠️  error: $? - review aborted ☠️💀☠️\n"
				fi
			else
				echo -e "\n☠️💀☠️  error: $? - review aborted ☠️💀☠️\n"
			fi
		else
			echo -e "\n☠️💀☠️  error: $? - review aborted ☠️💀☠️\n"
		fi
	else
		echo -e "\n☠️💀☠️  error: $? - review aborted ☠️💀☠️\n"
	fi
}

### run springboot app as if from STS
function sboot() {
	TMPDIR=`echo "$(pwd)"|grep -o '[^/]\+$'`
	TMPFILE="$TMPDIR.springboot.log"
	echo "▶︎ mvn spring-boot:run -Drun.arguments=--spring.profiles.active=local-int"
	touch "$TMPFILE"
	open -a Sublime\ Text "$TMPFILE"
	echo "▶︎ Springboot application is starting. Press [Ctrl+C] to stop..."
	#	mvn spring-boot:run -Drun.arguments=-Dcom.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory=true,--spring.profiles.active=local-int,-Djavax.net.ssl.keyStore=src/test/resources/ssl/keystore.jks,-Djavax.net.ssl.keyStorePassword=changeit,-Djavax.net.ssl.trustStore=src/test/resources/ssl/truststore.jks,-Djavax.net.ssl.trustStorePassword=changeit > "$TMPFILE"
	mvn spring-boot:run -Drun.arguments=-Dcom.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory=false,--spring.profiles.active=local-int > "$TMPFILE"
	echo " "
	read -p "▶︎ Press [Enter] to remove $TMPFILE, or [Ctrl+C] to leave the log file in place."
	echo "▶︎ rm $TMPFILE"
	rm "$TMPFILE"
}

############################################################
##### ------------------------------------------------ #####
#####              ACTUALLY RUN SOMETHING              #####
##### ------------------------------------------------ #####
############################################################

### run bashrc if it exists
if [ -f ~/.bashrc  ]; then
	. ~/.bashrc
	#  echo "sourced baschrc"
fi

### show aliases
#set | grep \ \(\)
showaliases
